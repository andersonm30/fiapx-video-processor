DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASS=postgres
DB_NAME=authdb
PORT=3000
JWT_SECRET=aj6I4zJ4jxT1Vsk8q3!q8*2%T91m4G5n7w1B9Xk2tR6sE0V1
GATEWAY_PORT=8000

{
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
    "start": "node dist/index.js",
    "build": "tsc"
  }
}

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { createProxyMiddleware } from 'http-proxy-middleware';

dotenv.config();

const app = express();

// Middlewares básicos
app.use(cors());
app.use(express.json());

const PORT = process.env.GATEWAY_PORT || 8000;

// Rota de health check para o gateway
app.get('/gateway/health', (req, res) => {
    res.json({ status: 'API Gateway is running' });
});

// Configuração do Proxy para o Auth Service
const authServiceProxy = createProxyMiddleware({
    target: 'http://localhost:3000', // URL do seu auth-service
    changeOrigin: true,
});

// Roteia todas as requisições que começam com /auth para o auth-service
app.use('/auth', authServiceProxy);

app.listen(PORT, () => {
    console.log(`API Gateway running on port ${PORT}`);
});

